name: stable-macos

on:
  workflow_dispatch:
    inputs:
      force_version:
        type: boolean
        description: Force update version
      generate_assets:
        type: boolean
        description: Generate assets
      checkout_pr:
        type: string
        description: Checkout PR
  repository_dispatch:
    types: [stable]
  push:
    branches: [main]
    paths-ignore:
      - "**/*.md"
  pull_request:
    branches: [main]
    paths-ignore:
      - "**/*.md"

env:
  APP_NAME: Aide
  ASSETS_REPOSITORY: ${{ github.repository_owner }}/binaries
  OS_NAME: osx
  VERSIONS_REPOSITORY: ${{ github.repository_owner }}/versions
  VSCODE_QUALITY: stable
  NEW_RELEASE: true

jobs:
  build:
    runs-on: ${{ matrix.runner }}
    env:
      VSCODE_ARCH: ${{ matrix.vscode_arch }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: macos-13
            vscode_arch: x64
          - runner: macos-14
            vscode_arch: arm64

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.GITHUB_BRANCH }}

      - name: Switch to relevant branch
        env:
          PULL_REQUEST_ID: ${{ github.event.inputs.checkout_pr }}
        run: . get_pr.sh

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: "20.18.2"

      - name: Setup Python 3
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
        if: env.VSCODE_ARCH == 'x64'

      # - name: Point gcloud SDK to Python
      #   shell: bash
      #   run: echo "CLOUDSDK_PYTHON=${{ steps.setup-python.outputs.python-path }}" >> $GITHUB_ENV

      # - name: Authenticate with Google Cloud
      #   uses: 'google-github-actions/auth@v2'
      #   with:
      #     credentials_json: '${{ secrets.GCP_GAE_SA_KEY }}'

      # - name: Configure Google Cloud SDK
      #   uses: 'google-github-actions/setup-gcloud@v2'
      #   with:
      #     project_id: '${{ secrets.GCP_PROJECT_ID }}'

      - name: Clone VSCode repo
        run: . get_repo.sh

      - name: Check PR or cron
        env:
          GENERATE_ASSETS: ${{ github.event.inputs.generate_assets }}
        run: . check_cron_or_pr.sh

      - name: Check existing Aide tags/releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: . check_tags.sh
        if: env.SHOULD_DEPLOY == 'yes'

      - name: Build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./build.sh
        if: env.SHOULD_BUILD == 'yes'

      - name: Prepare assets
        env:
          # Using your new secrets with the expected names in the script
          CERTIFICATE_OSX_APP_PASSWORD: ${{ secrets.APPLE_APP_PWD }}
          CERTIFICATE_OSX_ID: ${{ secrets.APPLE_ID }}
          CERTIFICATE_OSX_P12_DATA: ${{ secrets.MACOS_CERTIFICATE }}
          CERTIFICATE_OSX_P12_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          CERTIFICATE_OSX_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CERTIFICATE_OSX_SIGNING_IDENTITY: ${{ secrets.MACOS_SIGNING_IDENTITY }}
        run: ./prepare_assets.sh
        if: env.SHOULD_BUILD == 'yes' && (env.SHOULD_DEPLOY == 'yes' || github.event.inputs.generate_assets == 'true')

      - name: Release
        env:
          # You'll need this token for creating releases - use GITHUB_TOKEN or create a new one
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./release.sh
        if: env.SHOULD_BUILD == 'yes' && env.SHOULD_DEPLOY == 'yes'

      - name: Update versions repo
        env:
          FORCE_UPDATE: ${{ github.event.inputs.force_version }}
          # You'll need this token for updating the versions repo
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_USERNAME: ${{ github.repository_owner }}
        run: ./update_version.sh
        if: env.SHOULD_DEPLOY == 'yes'

      - name: Upload assets
        uses: actions/upload-artifact@v4
        with:
          name: bin-${{ matrix.vscode_arch }}
          path: assets/
          retention-days: 3
        if: env.SHOULD_BUILD == 'yes' && env.SHOULD_DEPLOY == 'no' && github.event.inputs.generate_assets == 'true'

      - name: Clean up keychain
        if: always()
        run: |
          KEYCHAIN=$RUNNER_TEMP/build.keychain

          if [ -f "$KEYCHAIN" ];
          then
            security delete-keychain $KEYCHAIN
          fi
